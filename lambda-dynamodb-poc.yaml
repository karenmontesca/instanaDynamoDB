AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda + DynamoDB + API Gateway POC

Resources:
  # DynamoDB Table
  DynamoDBPOCTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsuariosPOC
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Proyecto
          Value: POC-Aprendizaje

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoDBPOCRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBPOCPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBPOCTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaDynamoDBPOC
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-poc-235494811373-us-east-1 # bucket ya creado previamente #NOMBRE DE BUCKETT
        S3Key: function.zip

  LambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway.ApiId}/*/*/

  # API Gateway HTTP API
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: LambdaDynamoDBPOCApi
      ProtocolType: HTTP

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}
      PayloadFormatVersion: '2.0'

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "GET /"
      Target: !Sub integrations/${ApiGatewayIntegration}

  ApiGatewayDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref ApiGateway
    DependsOn: ApiGatewayRoute

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: prod
      DeploymentId: !Ref ApiGatewayDeployment
      AutoDeploy: true


Outputs:
  LambdaFunctionName:
    Description: Nombre de la función Lambda
    Value: !Ref LambdaFunction

  DynamoDBTableName:
    Description: Nombre de la tabla DynamoDB
    Value: !Ref DynamoDBPOCTable

  ApiEndpoint:
    Description: URL pública del API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
